@page "/"
@inject MainService mainService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container">
    Server Status: <span class="@status_class">@isOn</span>
</div>

<div class="container mt-2">
    <button class="btn btn-outline-primary" @onclick="SendWake">Send Wake</button>
</div>

@code {
    private string isOn = "";
    private string status_class = "text-danger";

    protected override async Task OnInitializedAsync()
    {
        await UpdateStatus();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        mainService.Timer.Elapsed += async (o, args) =>
        {
            await UpdateStatus();
        };

        StateHasChanged(); // IF NOT USED, your updated version of states will not get rendered
        await base.OnAfterRenderAsync(firstRender); // Not required, it just returns the `Task.CompletedTask;`
    }

    async Task UpdateStatus()
    {
        await Task.Run(() =>
        {
            var status = mainService.GetStatus().IsOn;
            isOn = status ? "Online" : "Offline";
            status_class = status ? "text-success" : "text-danger";
            InvokeAsync(() => StateHasChanged());
        });
    }

    void SendWake()
    {
        mainService.SendWake();
    }
}