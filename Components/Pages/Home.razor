@page "/"

@using Microsoft.Extensions.Options

@implements IDisposable

@inject MainService mainService
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject ServerConfigService ConfigService

@rendermode InteractiveServer

<PageTitle>Wake on Lan Pi</PageTitle>

<h1 style="text-align: center"><img src="favicon.png" /> Wake on Lan PI</h1>

<nav>
    <ul>
        <li>
            <ThemeToggle />
        </li>
        <li>
            <ThemeSelector />
        </li>
    </ul>
</nav>

@foreach (var chunk in ServerList.Chunk(2))
{
    <div class="grid">
    @foreach (var serverCardInfo in chunk)
    {
        @if (serverCardInfo.server == null)
        {
            <article style="display: flex; justify-content: center; align-items: center; height: 200px">
                <button type="button" style="margin: auto;" @onclick="AddServer">
                <img width="24" src="/plus-symbol-button.png" />
            </button>
            </article>
        }
        else
        {
            <ServerCard
                server="serverCardInfo.server"
                IsLoading="@serverCardInfo.IsLoading" 
                IsValid="@serverCardInfo.IsValid" 
                IsOn="@serverCardInfo.IsOn" 
                OnEditSaved="OnEditSaved" />
        }
        @if (chunk.Length % 2 != 0)
        {
            <div></div>
        }
    }
    </div>
}

@code {
    private PeriodicTimer timer = new(TimeSpan.FromSeconds(5));
    private CancellationTokenSource cts = new();
    private List<ServerCardInfo> ServerList = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        CreateServerList();
        _ = UpdateStatusAsync();

        ConfigService.OnConfigChanged += Reload;
    }

    private async Task UpdateStatusAsync()
    {
        while (await timer.WaitForNextTickAsync(cts.Token))
        {
            var tasks = ServerList.Select(async s =>
            {
                if (s.IsValid)
                    await UpdateServerCard(s);
            });

            await Task.WhenAll(tasks);
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task UpdateServerCard(ServerCardInfo serverCardInfo)
    {
        if (serverCardInfo.server == null) return;

        var status = await mainService.GetStatusAsync(serverCardInfo.server.HostnameOrAddress);
        if (status.Error == "No such host is known.")
        {
            serverCardInfo.IsValid = false;
            serverCardInfo.IsOn = false;
            serverCardInfo.IsLoading = false;
            return;
        }
        serverCardInfo.IsOn = status.IsOn;
        serverCardInfo.IsLoading = false;
    }

    private void CreateServerList()
    {
        ServerList.Clear();
        int index = 0;
        foreach (var server in ConfigService.Servers)
        {
            ServerList.Add(new()
            {
                server = server,
                Index = index++
            });
        }
        ServerList.Add(new()
        {
            server = null
        });
    }

    private void AddServer()
    {
        ConfigService.Servers.Add(new()
        {
            Name = "X",
            HostnameOrAddress = "X",
            MacAddress = "X"
        });

        CreateServerList();

        ConfigService.Save();
    }

    private void OnEditSaved()
    {
        ConfigService.Save();
    }

    private async void Reload()
    {
        CreateServerList();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        cts?.Dispose();
        timer.Dispose();
        ConfigService.OnConfigChanged -= Reload;
    }
}