@page "/"
@using Microsoft.Extensions.Options
@implements IDisposable
@inject MainService mainService
@inject IConfiguration Configuration
@inject List<Server> Servers
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>Wol Pi</PageTitle>

<div class="container">
    Server Status: <span class="@status_class">@isOn</span>
</div>

<div class="container mt-2">
    @* <button class="btn btn-outline-primary" @onclick="SendWake">Send Wake</button> *@
</div>

@foreach (var server in Servers)
{
    <article>
        <header>@server.Name - </header>
        @server.HostnameOrAddress
        @server.MacAddress
    </article>
}

<AddServerDialog />

@code {
    private string isOn = "Loading...";
    private string status_class = "text-info";
    private System.Timers.Timer timer = new(TimeSpan.FromSeconds(2));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timer.Elapsed += async (o, args) =>
            {
                await UpdateStatus();
            };
            timer.Start();
        }

        StateHasChanged(); // IF NOT USED, your updated version of states will not get rendered
        await base.OnAfterRenderAsync(firstRender); // Not required, it just returns the `Task.CompletedTask;`
    }

    async Task UpdateStatus()
    {
        var status = await mainService.GetStatusAsync();
        isOn = status.IsOn ? "Online" : "Offline";
        status_class = status.IsOn ? "text-success" : "text-danger";
        await InvokeAsync(() => StateHasChanged());
    }

    async void SendWake(string MacAddress)
    {
        await mainService.SendWake(MacAddress);
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    
}